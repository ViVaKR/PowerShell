# 할당

## 대입
$b = -27
$a = if ($b -lt 0) { 0 } else { $b }
$a


# 배열
$a = "apple", "orange", "lemon", "grape"`

# 해시 테이블 : `@`, `;`, `{ 중괄호 }`, `key,
$a = @{ one = 1; two = 2; three = 3 }

# `16진수 :  `0x` 붙임
$a = 0x10

# 지수 : `e` + 10의 배수
$a = 3.141592e3

# KB, MB, GB... : `kb, mb, gb...
$a = 10gb

# 복합 할당 연산자 : 할당전 값에 대해 숫자 연산을 수행함
$x = 1 # Global scope

## 중괄호는 새범위를 만듦, 중괄호 안의 변수는 전역 변수의 복사본이 아닌 새로운 인스턴스 임
& { $x += 1; $x } # 1

## 일반 할당 연산자를 사용하면 부모 범위에서 변수의 복사본을 가져오나 부모 범위에서는 변경되지 않음

& { $x = $x + 1; $x } # 2

# `+=` : 연산자의 오른쪽에 있는 양 많큼 기존 값을 증가 후 할당함
$a = 4
$a += 2
$a # => 6

# 변수가 문자열이면 연산자 오른쪽에 있는 값이 문자열에 추가됨
$a = "Windows"
$a = " PowerShell"
$a # => Windows PowerShell

# 배열일 경우에는 모든 형식의 값을 추가함
$a = 1, 2, 3
$a += 5
$a += "string"
$a # => 1, 2, 3, 5, "string"

# 해시 테이블
$a = @{ a = 1; b = 2; c = 3 }
$a += @{ mode = "write" }
$a # => 

# `-=`, `*=`, `/=`, `%=`
$a = 1, 2, 4
$a[2] -= 1
$a # => 1, 2, 3

# 변수에 할당된 값 삭제 `Clear-Variable`, `=$null`, `Remove-Variable`
Clear-Variable -Name a
$a[2] = $null
$a = $null

# 증가, 감소 연산자 : `++$a`, `$a++`, `--$a`, `$a--`
## 값을 강제로 반환하려면 변수와 연산자를 괄호로 묶음 : `(++$a)`

# Null 병합 대입 연산자
$x = $null
$x ??= 123
$x # => 123

# GetType() : 변수에 값이 하나만 있을 경우에 할당된 값에 따라 변수의 데이터 형식이 결정됨

$a = 6
$a.GetType().FullName

# 암묵적인 캐스팅
$a = 6
$a += "3"
$a # => 9

[string]$a = 27
$a += 3
$a # => 273

# 형식 지정
[System.DateTime]$a = "2023-09-23"

# 여러변수 할당
$a, $b, $c = 1, 2, 3, 4, 5
$a # => 1
$b # => 2
$c # => 3, 4, 5

# 단일값을 여러 변수에 할당
$a = $b = $c = $e = "Same Value"
$e # => "Same Value"
